# ai-agent.conf - AIエージェント用サーバー設定

# HTTP -> HTTPS リダイレクト
server {
    listen 80;
    server_name ai.hbm-web.co.jp;  # 実際のドメインに変更
    return 301 https://$server_name$request_uri;
}

# HTTPS メインサーバー
server {
    listen 443 ssl http2;
    server_name ai.hbm-web.co.jp;  # 実際のドメインに変更

    # SSL証明書設定（Let's Encryptで取得）
    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_private_key /etc/nginx/ssl/privkey.pem;

    # ログ設定
    access_log /var/log/nginx/ai-agent.access.log main;
    error_log /var/log/nginx/ai-agent.error.log;

    # セキュリティ設定
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;

    # LINE Webhook専用エンドポイント（レート制限緩和）
    location /webhook {
        limit_req zone=webhook burst=50 nodelay;
        
        proxy_pass http://ai_agent;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # LINE Webhook用のタイムアウト設定
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # リクエストサイズ制限
        client_max_body_size 1M;
    }

    # API エンドポイント（一般的なレート制限）
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        
        proxy_pass http://ai_agent;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # APIタイムアウト設定
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # ヘルスチェックエンドポイント（制限なし）
    location /health {
        proxy_pass http://ai_agent;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # ヘルスチェック用短いタイムアウト
        proxy_connect_timeout 2s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
    }

    # ルートパス（情報表示用）
    location / {
        limit_req zone=api burst=10 nodelay;
        
        proxy_pass http://ai_agent;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # 通常のタイムアウト設定
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # 静的ファイル（もし必要になった場合）
    location /static/ {
        alias /var/www/static/;
        expires 30d;
        add_header Cache-Control "public, immutable";
    }

    # favicon.ico（404エラー防止）
    location = /favicon.ico {
        log_not_found off;
        access_log off;
        return 204;
    }

    # robots.txt（SEO対応）
    location = /robots.txt {
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /\n";
    }
}

# 開発用サーバー（HTTPのみ、必要に応じて有効化）
# server {
#     listen 8080;
#     server_name localhost;
#     
#     location / {
#         proxy_pass http://ai_agent;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection 'upgrade';
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_cache_bypass $http_upgrade;
#     }
# }